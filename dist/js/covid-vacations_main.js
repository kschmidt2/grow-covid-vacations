function drawHighcharts(){Highcharts.chart("chart-container-CV1",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:5,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1a53u8oNxFoH69P6uoChh8P2899e2KG5NhLYjfhDY9Vk",googleSpreadsheetWorksheet:1,endRow:13},plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{autoRotation:!1,overflow:"allow",style:{whiteSpace:"nowrap"}},tickLength:5,type:"category"},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueDecimals:0,valueSuffix:"%"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1},xAxis:{labels:{step:2}}}}]}}),Highcharts.chart("chart-container-CV2",{chart:{type:"dumbbell",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:10,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1a53u8oNxFoH69P6uoChh8P2899e2KG5NhLYjfhDY9Vk",googleSpreadsheetWorksheet:3},plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{autoRotation:!1,overflow:"allow",style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueDecimals:0,valuePrefix:"$",shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-CV3",{chart:{type:"dumbbell",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:5,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1a53u8oNxFoH69P6uoChh8P2899e2KG5NhLYjfhDY9Vk",googleSpreadsheetWorksheet:4,startColumn:6},plotOptions:{lowColor:"red",series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{autoRotation:!1,overflow:"allow",style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueDecimals:0,shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-CV4",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:5,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1a53u8oNxFoH69P6uoChh8P2899e2KG5NhLYjfhDY9Vk",googleSpreadsheetWorksheet:5,endRow:3},plotOptions:{series:{groupPadding:.1}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,itemMarginTop:-10},xAxis:{labels:{autoRotation:!1,overflow:"allow",style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueDecimals:0,shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-CV5",{chart:{type:"column",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:5,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1a53u8oNxFoH69P6uoChh8P2899e2KG5NhLYjfhDY9Vk",googleSpreadsheetWorksheet:6,startRow:25,endColumn:2},plotOptions:{series:{groupPadding:.1,clip:!1}},legend:{align:"right",symbolRadius:0,verticalAlign:"top",x:10,itemMarginTop:-10},xAxis:{labels:{autoRotation:!1,overflow:"allow",style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},min:-75,max:50,tickAmount:6},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueDecimals:0,shared:!0,valueSuffix:"%"},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-CV6",{chart:{type:"bar",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:5,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1a53u8oNxFoH69P6uoChh8P2899e2KG5NhLYjfhDY9Vk",googleSpreadsheetWorksheet:7,endRow:4},plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{autoRotation:!1,overflow:"allow",style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"},max:60},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueDecimals:0,shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}}),Highcharts.chart("chart-container-CV8",{chart:{type:"dumbbell",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:10,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1a53u8oNxFoH69P6uoChh8P2899e2KG5NhLYjfhDY9Vk",googleSpreadsheetWorksheet:9},plotOptions:{series:{groupPadding:.1}},legend:{enabled:!1},xAxis:{labels:{autoRotation:!1,overflow:"allow",style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{title:!1,labels:{useHTML:!0,overflow:"allow"}},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,valueDecimals:0,valuePrefix:"$",shared:!0},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},legend:{align:"left",x:-18},tooltip:{enabled:!1}}}]}})}Highcharts.setOptions({lang:{thousandsSep:","}}),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
